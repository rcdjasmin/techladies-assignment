{"version":3,"sources":["images/it me.JPG","components/aboutMe.jsx","components/contact.jsx","components/nav.jsx","components/map.jsx","components/list.jsx","components/weatherData.jsx","components/weatherApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AboutMe","Fragment","className","src","myPicture","alt","Contact","href","target","rel","Nav","basename","to","exact","activeClassName","type","name","onClick","document","getElementsByTagName","classList","toggle","class","MapContainer","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onMapClicked","state","areas","length","map","area","key","id","forecast","position","lat","location","latitude","lng","longitude","google","this","zoom","initialCenter","style","width","height","displayMarkers","visible","Component","GoogleApiWrapper","apiKey","AreasList","index","WeatherData","names","forecasts","fetch","then","results","json","data","area_metadata","label_location","items","WeatherApp","AppRouter","path","component","Boolean","window","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96a42af4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/it me.fe3b302f.JPG\";","import React from \"react\";\nimport myPicture from \"../images/it me.JPG\";\nimport '../styles/aboutMe.css';\n\nfunction AboutMe() {\n    return (\n      <React.Fragment>\n\n        <h1>Nice to meet you</h1>\n        <div className=\"about-wrapper\">\n            <div className=\"about_description\">\n                <p>Hello there! I'm Celena. I currently work as web designer at TradeGecko.</p>\n                <p>My educational background is in multimedia arts and design, but after a few years of working almost exclusively on the design aspect of marketing, UI/UX, and branding,\n                I'm now exploring the <em>building</em> part of things. I want to learn how to build usable and beautiful interfaces. This is why I want to be a part of the TechLadies Bootcamp!</p>\n                <p>Around this time last year, I attended a couple of TechLadies' Javascript study group sessions. I found these sessions to be\n                incredibly useful - not only because I get to work out programming tasks with other people (instead of just pulling my hair out in frustration), but\n                because it made me more accountable on my goal to learn.\n                </p>\n                <p>I hope I can do the same in an even more hands-on setting with the bootcamp. Being able to work on a real-world project for an NGO is an exciting opportunity\n                that I wish I can be a part of too.\n                </p>\n                <p>Outside of design, I spend my free time either trying out a new recipe, doing my nihongo homework, reading, or watching stuff on Netflix.\n                When I'm in a good mood, I go to the gym or do yoga. When I'm not, I just lie in bed and lurk in Reddit.\n                </p>\n            </div>\n            <div className=\"about_image-wrapper\">\n                <img src={myPicture} alt=\"me\" />\n            </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\nexport default AboutMe;","import React from \"react\";\n\n\nfunction Contact() {\n    return (\n    <React.Fragment>\n        <h1>Let's get in touch</h1>\n        <p>Here's how you can contact me:</p>\n        <ul>\n            <li><a href=\"https://dribbble.com/celenajasmin\" target=\"_blank\" rel=\"noopener noreferrer\" >Dribbble</a> is where I post small design work here and there</li>\n            <li><a href=\"https://codepen.io/celenajasmin/\" target=\"_blank\" rel=\"noopener noreferrer\" >Codepen</a> is my new favorite place in the internet</li>\n            <li>I have a <a href=\"https://www.linkedin.com/in/celenajasmin/\" target=\"_blank\" rel=\"noopener noreferrer\" >Linkedin</a> account too!</li>\n        </ul>\n    </React.Fragment>\n    );\n}\n\nexport default Contact;","import React from \"react\";\nimport { HashRouter, NavLink } from \"react-router-dom\";\n\n\nfunction Nav() {\n    return (\n        <HashRouter basename='/'>\n        <nav>\n            <ul>\n            <li>\n                <NavLink to=\"/\" exact={true} activeClassName=\"selected\">About me</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/contact/\" activeClassName=\"selected\">Contact</NavLink>\n            </li>\n            <li>\n                <NavLink to=\"/weather-app/\" activeClassName=\"selected\">Weather App</NavLink>\n            </li>\n            </ul>\n            <div className=\"theme-icon--wrapper\">\n                <input type=\"checkbox\" className=\"theme-toggle\" name=\"theme-toggle\" onClick={function(){document.getElementsByTagName(\"body\")[0].classList.toggle(\"theme--dark\");}}/>\n                <span class=\"theme-icon\"></span>\n            </div>\n        </nav>\n        </HashRouter>\n    );\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {}\n         }\n\n    }\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n          this.setState({\n            showingInfoWindow: false,\n            activeMarker: null\n          })\n        }\n    };\n\n\n    displayMarkers(areas) {\n        if (areas.length > 0) {\n            return areas.map((area)=> {\n                return <Marker\n                        key={area.name}\n                        id={area.name}\n                        forecast={area.forecast}\n                        position={{\n                            lat: area.location.latitude,\n                            lng: area.location.longitude\n                        }}\n                        onClick={this.onMarkerClick}\n                        />\n            })\n        } else {\n            return;\n        }\n\n    }\n\n    render() {\n        return (\n        <React.Fragment>\n\n            <Map\n            google={this.props.google}\n            zoom={12}\n            initialCenter={{lat: 1.3448,lng: 103.8224}}\n            onClick={this.onMapClicked}\n            style={{\n                width: '965px',\n                height: '720px'\n            }}\n            >\n\n            {this.displayMarkers(this.props.areas)}\n            <InfoWindow\n                marker={this.state.activeMarker}\n                visible={this.state.showingInfoWindow}>\n                    <div>\n                        <h3 className=\"map-marker--area\">{this.state.selectedPlace.id}</h3>\n                        <p className=\"map-marker--forecast\">{this.state.selectedPlace.forecast}</p>\n                    </div>\n            </InfoWindow>\n            </Map>\n        </React.Fragment>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyB3tdPraCrfxsgAycou0biylS1lWkndfAI'\n})(MapContainer);","import React, { Component } from 'react';\nclass AreasList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() {\n        if(this.props.areas.length > 0) {\n            return (\n                <div>\n                    <ul>\n                        {this.props.areas.map((area)=>{\n                            return (\n                                <li key={area.index}>\n                                {area.name}<br/>\n                                <small>{area.forecast}</small>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            );\n        } else {\n            return null;\n        }\n\n    }\n}\n\nexport default AreasList;","import React, { Component } from 'react';\nimport MapContainer from './map';\nimport '../styles/weatherPage.css';\nimport AreasList from './list';\n\nclass WeatherData extends Component {\n    constructor() {\n        super();\n        this.state = {\n            areas: {},\n            names: [],\n            forecasts: []\n         };\n    }\n\n    componentDidMount(){\n        fetch('https://api.data.gov.sg/v1/environment/2-hour-weather-forecast')\n        .then(results => results.json())\n        .then((data) => {\n            let names = data.area_metadata.map((area) => {\n                return area.name;\n            });\n            let forecasts = data.area_metadata.map((area,index) => {\n                return ({\n                    name: area.name,\n                    location: area.label_location,\n                    forecast: data.items[0].forecasts[index].forecast\n                });\n            });\n\n            this.setState({\n                areas: data.area_metadata,\n                names: names,\n                forecasts: forecasts\n            });\n        });\n\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n            <div className=\"weather-page-container\">\n                <div>\n                    <AreasList areas={this.state.forecasts}/>\n                </div>\n                <div>\n                    <MapContainer areas={this.state.forecasts}/>\n                </div>\n            </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default WeatherData;","import React from \"react\";\nimport WeatherData from './weatherData';\n\nfunction WeatherApp() {\n    return (\n    <React.Fragment>\n        <h1>Weather</h1>\n        <WeatherData />\n    </React.Fragment>\n    );\n  }\n\n  export default WeatherApp;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport AboutMe from \"./components/aboutMe\";\nimport Contact from \"./components/contact\";\nimport Nav from \"./components/nav\";\nimport WeatherApp from \"./components/weatherApp\";\n\n\nfunction AppRouter() {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <Nav />\n\n        <Route path=\"/\" exact component={AboutMe} />\n        <Route path=\"/contact/\" component={Contact} />\n        <Route path=\"/weather-app/\" component={WeatherApp} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}